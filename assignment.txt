Сайт за предлагане на подходящо висше учебно
заведение
I. Описание на проекта
Задачата на екипа е да създаде уебсайт с помощта на Flask и Python, чиято
основна цел е да предскаже най-подходяюото училище за ученик завършващ седми
клас. За целта трябва да бъде използван модел на машинно обучение (ML).
II. Основни компоненти:
1. Анкета и изграждане на датасет
Сайтът трябва да съдържа анкета с добре подбрани въпроси, целящи
събирането на качествени данни за изграждането на датасет. Събраните данни ще
бъдат използвани за обучение на ML модел (linear regression, perceptron, logistic
regression или невронна мрежа).
2. Целева променлива:
Подходяща бакалавърска програма и учебно заведение.
3. Функционалности на сайта
• Интерфейс за прогнози – достъпен за регистрирани потребители, позволява
използването на обучен модел за получаване на препоръки.
• Портал за помощ при избор на специалност – каталог с университети от
България и/или света. Всеки университет има набор от бакалавърски
специалности, които предлага.
o Всеки потребител може да попълне анкетата и да му бъдат предложени
най-подходящите за него специалности.
o При кликане на избраната специалност се отваря страница с набор от
уиниверситети които я предлагат.
o Всеки университет има страница с информация за самият университет и
подробности относно кандидатстването за различните програми
(минимален брой университети: 10).
o Администртаторите имат правото да редактират страниците на
университетите
III. Етапи на реализация
1. Организация на работата- Проектът трябва да бъде разделен на отделни задачи,
разпределени между членовете на екипа. Всяка задача трябва да има собствен
бранч (при нужда) и ясна история на комитите, за да се проследява кой какво е
реализирал, какви проблеми е разрешил и колко време е отнело изпълнението.
2. Регистрация и анкета – първоначално се създава функционалност за регистриране
на профили и попълване на анкетата.
3. Събиране на данни – сайтът се хоства и анкетата се предоставя на съответния
клас за попълване, с цел събиране на данни за модела.
4. Изчистване на данните – събраните данни се проверяват и въвеждат във вид
подходящ за обучение на модела. Избират се подходящи характеристики ( тук ще
ви е необходима помощ от Б клас ). Обосновава се изборът на характеристиките
5. Обучение на модела – Събраните данни се използват за обучението на модела
IV. изисквания
1. Изкуствен интелект
Category Description Points
1. Избор на алгоритъм Избраният алгоритъм е подходящ за решаването на
проблема
5
2. Моделът е
имплементиран
изцяло от ученика
не са използвани библиотеки като Sci-kit learn, keras,
tensorflow, pytorch. Позволено е да използвате pandas,
numpy, matplotlib, joblib и други подобни.
Tensorflow и pytorch могат да бъдат използвани само
за създаване на масиви/тензори, които могат да се
смятат с графична карта.
пример:
Pytorch: self.weights = torch.randn(input_size, 1,
device="cuda", dtype=torch.float32, requires_grad=True)
Tensorflow: self.w =
tf.Variable(tf.random.normal([input_dim, 1]),
name='weights')
В случай, че е използвана библиотека за
изпълнението на алгоритъма, максималният
допустим резултат за тази графа е 15 точки.
25
3. Датасет писмено обяснение и история от къде е
взет/генериран/събран датасетa и как е бил
преработен. (свободен текст)
10
5. Ефективността на
модела се следи
да се проучат и използват метриките accuracy, error,
loss, както и други при необходимост
10
6. Избраните
признаци(features) са
основателни
признаците, използвани за обучението на
алгоритъма, са добре обмислени, след което
тествани и най-накрая избрани.
10
7. Интеграция в уеб
приложение
Моделът е част от уебсайт и генерира предсказание
спрямо входовете на потребителя
10
TOTAL 100
2. Технически изисквания
№ Изискване Точки
1 Проекта е разработен с Python и Flask 5
2 Следните разширения на Flask трябва да бъдат използвани и
интегрирани по подходящ начин: Flask-Bootstrap, Flask-WTF, FlaskSQLAlchemy, Flask-Login, Flask-Migrate, Flask-Mail.
20
3 Да се използват Flask Blueprints за структуриране на проекта на
модули.
10
4 Да се използва механизъм за потвърждение на имейл чрез
токенизация (например чрез Flask-Mail и itsdangerous).
5
5 Да се създадат и изпълнят unit тестове за ключови функционалности. 10
6 Да се създадат персонализирани страници за грешки (напр. 404, 500),
които да се зареждат автоматично при възникване на грешка.
5
7 Сайтът трябва да включва интерфейс за попълване на анкети от
потребителите, като събраните данни се използват за обучение на AI
модел.
20
8 Интерфейсът на сайта трябва да позволява на потребителите да
взаимодействат с обучената AI функционалност (напр. прогнозиране
или класификация).
25
total 100
3. Функционални изисквания
№ Изискване Точки
1 Системата поддържа регистрация, вход и изход на
потребители с използване на Flask-Login.
10
2 Системата поддържа различни потребителски роли – поне
„ученик“ и „администратор“.
10
3 Всеки потребител трябва да разполага с профилна страница,
където може да редактира своите лични данни.
15
4 Потребителите могат да виждат резултатите от AI прогнозите на
други потребители, с тяхно съгласие.
15
5 Администраторите могат да редактират или изтриват
потребителски профили.
15
6 Интерфейсът позволява лесен достъп до функционалностите,
свързани с попълване на анкети и използване на AI
10
7 Сайтът трябва да включва потребителски интерфейс за преглед
и анализ на резултатите от обучените AI модели.
10
8 Навигацията и потребителският интерфейс са интуитивни 10
total 100
4. Изисквания за документацията
№ Изискване Точки
1 README.md файл с описание на проекта,
инструкции за инсталация и стартиране
15
2 Документиране чрез docstring и коментари в кода 10
3 Приложена е схема на базата данни (диаграма) 10
4 Обяснена е интеграцията между AI модула и уеб
приложението
10
5 Изготвени са минимум 10 user stories по Agile
методология
10
6 Водени са sprint логове веднъж седмично 15
7 Използвана е система за управление на задачи
(напр. Trello, GitHub Projects) със скрийншот на
дъската
10
8 Изготвен е краен PDF отчет с описание на
постигнатото, резултатите и разпределението на
задачите
10
9. Правилно използване на
контрол на версиите:
Всеки фийчър си има бранч и история на
разработване.
ПРОЕКТИ БЕЗ РАВНОМЕРНИ И РИТМИЧНИ КОМИТИ
НЯМА ДА БЪДАТ ОЦЕНЕНИ.
10
ТОТАЛ 100
V. разпределение на ролите
Всеки отбор има четири основни роли:
 Дизайнер
Основната отговорност на дизайнера е изграждането на уебсайта. Това включва:
• Съвместно с лидера изготвя план за визията и функционалността на сайта.
• Превръща този план в user stories с помощта на лидера.
• Разделя user stories на конкретни задачи (issues), които се имплементират по време
на проекта.
• За всяко issue се създават unit тестове и се разработва необходимата
функционалност.
• Работи в тясно сътрудничество с програмиста за интеграцията между сайта и AI
модела.
 Програмист
Отговаря за създаването на изкуствения интелект. Задачите включват:
• Съвместна работа с анализатора на данни за избора на подходящ модел.
• Изграждане, обучение и тестване на модела.
• Интегриране на готовия модел във Flask приложението, заедно с дизайнера.
 Анализатор на данни
Отговаря за събирането и подготовката на данни за машинното обучение:
• Създава въпросник в сътрудничество с психолог, с цел събиране на качествени
тренировъчни данни.
• Анализира събраните данни и ги обработва.
• При нужда – изкуствено увеличава (аугментира) датасета.
• При липса на текущи задачи – помага на програмиста с разработката на AI модела.
 Лидер (Scrum Master)
Координира целия екип и следи за напредъка:
• Организира първоначалната среща и създава начален план.
• Разделя задачите по спринтове и следи за тяхното изпълнение.
• Провежда кратки срещи в края на всеки спринт, за да се отчетат напредък и
проблеми.
• Грижи се за документацията – изисква я от участниците и я представя пред Product
Owner-а (наставник, учител).
• Оказва съдействие на всеки член на екипа при нужда.
 Всички
Ако даден участник в проекта няма активна задача, лидерът трябва незабавно да му възложи
такава, за да се гарантира ефективността на екипа.